{
  "id": 1,
  "name": "raspberryPiZero",
  "description": "Raspberry Pi zero 8GB 256GB.",
  "masSystem": {
    "id": 31,
    "name": "garden_mas",
    "description": "The garden MAS.",
    "environment": {
      "id": 32,
      "name": "garden",
      "description": "The garden environment.",
      "resources": [
        {
          "id": 33,
          "name": "sprinkler",
          "description": "Sprinkler is used to moisten the soil."
        },
        {
          "id": 34,
          "name": "temperature_sensor",
          "description": "The temperature sensor for the environment."
        },
        {
          "id": 35,
          "name": "pH_sensor",
          "description": "The pH sensor for the soil\u0027s pH."
        },
        {
          "id": 36,
          "name": "moisture_sensor",
          "description": "The moisture sensor for the soil."
        },
        {
          "id": 37,
          "name": "luminosity_sensor",
          "description": "The luminosity sensor for the environment."
        }
      ],
      "facets": [
        {
          "id": 38,
          "name": "on",
          "canBeSensed": true,
          "canBeChanged": true,
          "initialValue": "",
          "canChange": true
        },
        {
          "id": 39,
          "name": "off",
          "canBeSensed": true,
          "canBeChanged": true,
          "initialValue": "",
          "canChange": true
        },
        {
          "id": 40,
          "name": "status",
          "dataType": "on/off",
          "canBeSensed": true,
          "canBeChanged": true,
          "initialValue": "",
          "canChange": false
        },
        {
          "id": 41,
          "name": "valueInCelsius",
          "dataType": "ºC",
          "canBeSensed": true,
          "canBeChanged": true,
          "initialValue": "",
          "canChange": false
        },
        {
          "id": 42,
          "name": "valueInPh",
          "dataType": "",
          "canBeSensed": true,
          "canBeChanged": true,
          "initialValue": "",
          "canChange": false
        },
        {
          "id": 43,
          "name": "valueInKgPerM3",
          "dataType": "kg/m³",
          "canBeSensed": true,
          "canBeChanged": true,
          "initialValue": "",
          "canChange": false
        },
        {
          "id": 44,
          "name": "status",
          "dataType": "noLight/withLight",
          "canBeSensed": true,
          "canBeChanged": true,
          "initialValue": "",
          "canChange": false
        }
      ],
      "agents": [
        {
          "id": 45,
          "name": "physical_agent",
          "description": "The agent responsible to interact with the environment.",
          "initialState": {
            "id": 48,
            "initialBeliefs": [],
            "initialGoals": []
          },
          "plans": [
            {
              "id": 49,
              "name": "start",
              "description": "",
              "successCondition": "true",
              "actions": [
                {
                  "id": 50,
                  "name": "openPercepts",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "percepts",
                    "open"
                  ],
                  "order": 0
                }
              ]
            },
            {
              "id": 51,
              "name": "temperature(T)",
              "description": "",
              "successCondition": "",
              "actions": [
                {
                  "id": 52,
                  "name": "blockPercepts",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "percepts",
                    "block"
                  ],
                  "order": 0
                },
                {
                  "id": 53,
                  "name": "telltemperature",
                  "description": "",
                  "actionSchema": {
                    "name": "messageAction",
                    "parameterDefinition": "to;message"
                  },
                  "params": [
                    "47",
                    "temperature(T)"
                  ],
                  "order": 1
                },
                {
                  "id": 54,
                  "name": "openPercepts",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "percepts",
                    "open"
                  ],
                  "order": 2
                }
              ]
            },
            {
              "id": 55,
              "name": "on",
              "description": "",
              "successCondition": "true",
              "actions": [
                {
                  "id": 56,
                  "name": "loggingMyOnAction",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "print",
                    "Turning the irrigator on."
                  ],
                  "order": 0
                },
                {
                  "template": {
                    "id": 38,
                    "name": "on",
                    "canBeSensed": true,
                    "canBeChanged": true,
                    "initialValue": "",
                    "canChange": true
                  },
                  "id": 57,
                  "name": "turnOn",
                  "description": "",
                  "actionSchema": {
                    "name": "facetAction",
                    "parameterDefinition": "facetValue"
                  },
                  "order": 1
                }
              ]
            },
            {
              "id": 58,
              "name": "off",
              "description": "",
              "successCondition": "true",
              "actions": [
                {
                  "id": 59,
                  "name": "loggingMyOffAction",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "print",
                    "Turning the irrigator off."
                  ],
                  "order": 0
                },
                {
                  "template": {
                    "id": 39,
                    "name": "off",
                    "canBeSensed": true,
                    "canBeChanged": true,
                    "initialValue": "",
                    "canChange": true
                  },
                  "id": 60,
                  "name": "turnOff",
                  "description": "",
                  "actionSchema": {
                    "name": "facetAction",
                    "parameterDefinition": "facetValue"
                  },
                  "order": 1
                }
              ]
            }
          ]
        },
        {
          "id": 46,
          "name": "communicator",
          "description": "The communicator agent",
          "initialState": {
            "id": 98,
            "initialBeliefs": [],
            "initialGoals": [
              {
                "commited": true,
                "planDescriptor": {
                  "id": 84,
                  "name": "start",
                  "description": "Start plan of the communicator agent.",
                  "successCondition": "true",
                  "actions": [
                    {
                      "id": 85,
                      "name": "loggingMyConnectionToRML",
                      "description": "",
                      "actionSchema": {
                        "name": "defaultAction",
                        "parameterDefinition": "actionName;[params]"
                      },
                      "params": [
                        "print",
                        "Connecting to RML."
                      ],
                      "order": 0
                    },
                    {
                      "id": 86,
                      "name": "connectingToRML",
                      "description": "",
                      "actionSchema": {
                        "name": "defaultAction",
                        "parameterDefinition": "actionName;[params]"
                      },
                      "params": [
                        "connectToRml",
                        "127.0.0.1",
                        "5500"
                      ],
                      "order": 1
                    },
                    {
                      "id": 87,
                      "name": "startIoTObjectCycle",
                      "description": "",
                      "actionSchema": {
                        "name": "intentionAction",
                        "parameterDefinition": "intention"
                      },
                      "params": [
                        "iotObjectCycle"
                      ],
                      "order": 2
                    }
                  ]
                },
                "id": 99,
                "name": "start",
                "statement": "start"
              }
            ]
          },
          "plans": [
            {
              "id": 84,
              "name": "start",
              "description": "Start plan of the communicator agent.",
              "successCondition": "true",
              "actions": [
                {
                  "id": 85,
                  "name": "loggingMyConnectionToRML",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "print",
                    "Connecting to RML."
                  ],
                  "order": 0
                },
                {
                  "id": 86,
                  "name": "connectingToRML",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "connectToRml",
                    "127.0.0.1",
                    "5500"
                  ],
                  "order": 1
                },
                {
                  "id": 87,
                  "name": "startIoTObjectCycle",
                  "description": "",
                  "actionSchema": {
                    "name": "intentionAction",
                    "parameterDefinition": "intention"
                  },
                  "params": [
                    "iotObjectCycle"
                  ],
                  "order": 2
                }
              ]
            },
            {
              "id": 88,
              "name": "iotObjectCycle",
              "description": "Plan to cycle IoT Object.",
              "successCondition": "true",
              "actions": [
                {
                  "id": 89,
                  "name": "sendToRml",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "sendToRml"
                  ],
                  "order": 0
                },
                {
                  "id": 90,
                  "name": "waitInMilliseconds",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "wait",
                    "1000"
                  ],
                  "order": 1
                },
                {
                  "id": 91,
                  "name": "restartIoTObjectCycle",
                  "description": "",
                  "actionSchema": {
                    "name": "intentionAction",
                    "parameterDefinition": "intention"
                  },
                  "params": [
                    "iotObjectCycle"
                  ],
                  "order": 2
                }
              ]
            },
            {
              "id": 92,
              "name": "on",
              "description": "",
              "successCondition": "true",
              "actions": [
                {
                  "id": 93,
                  "name": "loggingMyOnAction",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "print",
                    "Asking mediator to turn on the irrigator."
                  ],
                  "order": 0
                },
                {
                  "id": 94,
                  "name": "sendTurnOn",
                  "description": "",
                  "actionSchema": {
                    "name": "messageAction",
                    "parameterDefinition": "to;message"
                  },
                  "params": [
                    "47",
                    "on"
                  ],
                  "order": 1
                }
              ]
            },
            {
              "id": 95,
              "name": "off",
              "description": "",
              "successCondition": "true",
              "actions": [
                {
                  "id": 96,
                  "name": "loggingMyOffAction",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "print",
                    "Asking mediator to turn off the irrigator."
                  ],
                  "order": 0
                },
                {
                  "id": 97,
                  "name": "sendTurnOff",
                  "description": "",
                  "actionSchema": {
                    "name": "messageAction",
                    "parameterDefinition": "to;message"
                  },
                  "params": [
                    "47",
                    "off"
                  ],
                  "order": 1
                }
              ]
            }
          ]
        },
        {
          "id": 47,
          "name": "mediator",
          "description": "The mediator agent.",
          "initialState": {
            "id": 81,
            "initialBeliefs": [
              {
                "id": 82,
                "name": "irrigatorOff",
                "statement": "irrigator(off)"
              }
            ],
            "initialGoals": [
              {
                "commited": true,
                "planDescriptor": {
                  "id": 64,
                  "name": "temperature",
                  "description": "Send the temperature to communicator.",
                  "successCondition": "temperature \u003c\u003d 35",
                  "actions": [
                    {
                      "id": 68,
                      "name": "temperatureIntention",
                      "description": "",
                      "actionSchema": {
                        "name": "intentionAction",
                        "parameterDefinition": "intention"
                      },
                      "params": [
                        "temperature"
                      ],
                      "order": 0
                    }
                  ]
                },
                "id": 83,
                "name": "temperature",
                "statement": "temperature"
              }
            ]
          },
          "plans": [
            {
              "id": 61,
              "name": "temperature",
              "description": "Send the temperature to communicator.",
              "successCondition": "temperature \u003c\u003d 10",
              "actions": [
                {
                  "id": 62,
                  "name": "sendTemperature",
                  "description": "",
                  "actionSchema": {
                    "name": "messageAction",
                    "parameterDefinition": "to;message"
                  },
                  "params": [
                    "46",
                    "temperature(too_cold_for_plants)"
                  ],
                  "order": 0
                },
                {
                  "id": 63,
                  "name": "temperatureIntention",
                  "description": "",
                  "actionSchema": {
                    "name": "intentionAction",
                    "parameterDefinition": "intention"
                  },
                  "params": [
                    "temperature"
                  ],
                  "order": 1
                }
              ]
            },
            {
              "id": 64,
              "name": "temperature",
              "description": "Send the temperature to communicator.",
              "successCondition": "temperature \u003c\u003d 35",
              "actions": [
                {
                  "id": 68,
                  "name": "temperatureIntention",
                  "description": "",
                  "actionSchema": {
                    "name": "intentionAction",
                    "parameterDefinition": "intention"
                  },
                  "params": [
                    "temperature"
                  ],
                  "order": 0
                }
              ]
            },
            {
              "id": 67,
              "name": "temperature",
              "description": "Send the temperature to communicator."
            },
            {
              "id": 69,
              "name": "on",
              "description": "Asking physical_agent to turn on the sprinkler.",
              "actions": [
                {
                  "id": 70,
                  "name": "logginngMyOnAction",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "print",
                    "Turning the irrigator on."
                  ],
                  "order": 0
                },
                {
                  "id": 71,
                  "name": "sendOnPgysicalAgent",
                  "description": "",
                  "actionSchema": {
                    "name": "messageAction",
                    "parameterDefinition": "to;message"
                  },
                  "params": [
                    "45",
                    "on"
                  ],
                  "order": 1
                },
                {
                  "id": 72,
                  "name": "sendOnCommunicator",
                  "description": "",
                  "actionSchema": {
                    "name": "messageAction",
                    "parameterDefinition": "to;message"
                  },
                  "params": [
                    "46",
                    "irrigator(on)"
                  ],
                  "order": 2
                },
                {
                  "id": 73,
                  "name": "removeIrrigatorOffBelief",
                  "description": "",
                  "actionSchema": {
                    "name": "beliefAction",
                    "parameterDefinition": "operation;proposition"
                  },
                  "params": [
                    "-",
                    "irrigator(off)"
                  ],
                  "order": 3
                },
                {
                  "id": 74,
                  "name": "addIrrigatorOnBelief",
                  "description": "",
                  "actionSchema": {
                    "name": "beliefAction",
                    "parameterDefinition": "operation;proposition"
                  },
                  "params": [
                    "+",
                    "irrigator(on)"
                  ],
                  "order": 4
                }
              ]
            },
            {
              "id": 75,
              "name": "off",
              "description": "Asking physical_agent to turn off the sprinkler.",
              "actions": [
                {
                  "id": 76,
                  "name": "logginngMyOffAction",
                  "description": "",
                  "actionSchema": {
                    "name": "defaultAction",
                    "parameterDefinition": "actionName;[params]"
                  },
                  "params": [
                    "print",
                    "Turning the irrigator off."
                  ],
                  "order": 0
                },
                {
                  "id": 77,
                  "name": "sendOffPgysicalAgent",
                  "description": "",
                  "actionSchema": {
                    "name": "messageAction",
                    "parameterDefinition": "to;message"
                  },
                  "params": [
                    "45",
                    "off"
                  ],
                  "order": 1
                },
                {
                  "id": 78,
                  "name": "sendOffCommunicator",
                  "description": "",
                  "actionSchema": {
                    "name": "messageAction",
                    "parameterDefinition": "to;message"
                  },
                  "params": [
                    "46",
                    "irrigator(off)"
                  ],
                  "order": 2
                },
                {
                  "id": 79,
                  "name": "removeIrrigatorOnBelief",
                  "description": "",
                  "actionSchema": {
                    "name": "beliefAction",
                    "parameterDefinition": "operation;proposition"
                  },
                  "params": [
                    "-",
                    "irrigator(on)"
                  ],
                  "order": 3
                },
                {
                  "id": 80,
                  "name": "addIrrigatorOffBelief",
                  "description": "",
                  "actionSchema": {
                    "name": "beliefAction",
                    "parameterDefinition": "operation;proposition"
                  },
                  "params": [
                    "+",
                    "irrigator(off)"
                  ],
                  "order": 4
                }
              ]
            }
          ]
        }
      ]
    }
  },
  "physicalResources": [
    {
      "id": 2,
      "name": "sprinkler",
      "description": "Sprinkler is used to moisten the soil.",
      "resource": {
        "id": 33,
        "name": "sprinkler",
        "description": "Sprinkler is used to moisten the soil."
      },
      "topics": [
        {
          "initialValue": "off",
          "facetDefinition": {
            "id": 40,
            "name": "status",
            "dataType": "on/off",
            "canBeSensed": true,
            "canBeChanged": true,
            "initialValue": "",
            "canChange": false
          },
          "id": 3,
          "name": "status",
          "description": "The state of the Sprinkler (on, off).",
          "dataType": "on/off",
          "blocks": [
            {
              "variable": {
                "id": 108,
                "name": "statusValue",
                "content": "",
                "type": "SIGNAL"
              },
              "targetFunction": {
                "id": 9,
                "name": "status",
                "description": "Status of the valve.",
                "blocks": [
                  {
                    "pin": {
                      "id": 10,
                      "name": "dataPin",
                      "isAnalog": false,
                      "isInput": false
                    },
                    "variable": {
                      "id": 107,
                      "name": "valveStatus",
                      "content": "",
                      "type": "SIGNAL"
                    },
                    "targetFunction": {
                      "id": 0,
                      "parameters": []
                    },
                    "arguments": [],
                    "id": 106,
                    "order": 0
                  }
                ],
                "parameters": []
              },
              "arguments": [],
              "id": 109,
              "order": 0
            },
            {
              "condition": "statusValue \u003d\u003d HIGH",
              "trueBlocks": [
                {
                  "variable": {
                    "id": 113,
                    "name": "",
                    "content": "on",
                    "type": "TEXT"
                  },
                  "targetFunction": {
                    "id": 112,
                    "name": "\u003d",
                    "description": "",
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 111,
                  "order": 0
                }
              ],
              "falseBlocks": [
                {
                  "variable": {
                    "id": 116,
                    "name": "",
                    "content": "off",
                    "type": "TEXT"
                  },
                  "targetFunction": {
                    "id": 115,
                    "name": "\u003d",
                    "description": "",
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 114,
                  "order": 0
                }
              ],
              "id": 110,
              "order": 1
            }
          ],
          "parameters": []
        }
      ],
      "commands": [
        {
          "facetDefinition": {
            "id": 38,
            "name": "on",
            "canBeSensed": true,
            "canBeChanged": true,
            "initialValue": "",
            "canChange": true
          },
          "id": 4,
          "name": "on",
          "description": "Turn on the Sprinkler.",
          "blocks": [
            {
              "targetFunction": {
                "id": 7,
                "name": "open",
                "description": "Open the valve.",
                "blocks": [
                  {
                    "pin": {
                      "id": 10,
                      "name": "dataPin",
                      "isAnalog": false,
                      "isInput": false
                    },
                    "targetFunction": {
                      "id": 0,
                      "parameters": []
                    },
                    "arguments": [
                      {
                        "id": 101,
                        "name": "",
                        "content": "HIGH",
                        "type": "SIGNAL"
                      }
                    ],
                    "id": 100,
                    "order": 0
                  }
                ],
                "parameters": []
              },
              "arguments": [],
              "id": 102,
              "order": 0
            }
          ],
          "parameters": []
        },
        {
          "facetDefinition": {
            "id": 39,
            "name": "off",
            "canBeSensed": true,
            "canBeChanged": true,
            "initialValue": "",
            "canChange": true
          },
          "id": 5,
          "name": "off",
          "description": "Turn off the Sprinkler.",
          "blocks": [
            {
              "targetFunction": {
                "id": 8,
                "name": "close",
                "description": "Close the valve.",
                "blocks": [
                  {
                    "pin": {
                      "id": 10,
                      "name": "dataPin",
                      "isAnalog": false,
                      "isInput": false
                    },
                    "targetFunction": {
                      "id": 0,
                      "parameters": []
                    },
                    "arguments": [
                      {
                        "id": 104,
                        "name": "",
                        "content": "LOW",
                        "type": "SIGNAL"
                      }
                    ],
                    "id": 103,
                    "order": 0
                  }
                ],
                "parameters": []
              },
              "arguments": [],
              "id": 105,
              "order": 0
            }
          ],
          "parameters": []
        }
      ],
      "components": [
        {
          "id": 6,
          "name": "valve",
          "description": "The solenoid valve with open/close functionalities.",
          "functions": [
            {
              "id": 7,
              "name": "open",
              "description": "Open the valve.",
              "blocks": [
                {
                  "pin": {
                    "id": 10,
                    "name": "dataPin",
                    "isAnalog": false,
                    "isInput": false
                  },
                  "targetFunction": {
                    "id": 0,
                    "parameters": []
                  },
                  "arguments": [
                    {
                      "id": 101,
                      "name": "",
                      "content": "HIGH",
                      "type": "SIGNAL"
                    }
                  ],
                  "id": 100,
                  "order": 0
                }
              ],
              "parameters": []
            },
            {
              "id": 8,
              "name": "close",
              "description": "Close the valve.",
              "blocks": [
                {
                  "pin": {
                    "id": 10,
                    "name": "dataPin",
                    "isAnalog": false,
                    "isInput": false
                  },
                  "targetFunction": {
                    "id": 0,
                    "parameters": []
                  },
                  "arguments": [
                    {
                      "id": 104,
                      "name": "",
                      "content": "LOW",
                      "type": "SIGNAL"
                    }
                  ],
                  "id": 103,
                  "order": 0
                }
              ],
              "parameters": []
            },
            {
              "id": 9,
              "name": "status",
              "description": "Status of the valve.",
              "blocks": [
                {
                  "pin": {
                    "id": 10,
                    "name": "dataPin",
                    "isAnalog": false,
                    "isInput": false
                  },
                  "variable": {
                    "id": 107,
                    "name": "valveStatus",
                    "content": "",
                    "type": "SIGNAL"
                  },
                  "targetFunction": {
                    "id": 0,
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 106,
                  "order": 0
                }
              ],
              "parameters": []
            }
          ],
          "pins": [
            {
              "id": 10,
              "name": "dataPin",
              "isAnalog": false,
              "isInput": false
            }
          ]
        }
      ]
    },
    {
      "id": 11,
      "name": "temperature_sensor",
      "description": "The temperature sensor for the environment.",
      "resource": {
        "id": 34,
        "name": "temperature_sensor",
        "description": "The temperature sensor for the environment."
      },
      "topics": [
        {
          "initialValue": "0.0",
          "facetDefinition": {
            "id": 41,
            "name": "valueInCelsius",
            "dataType": "ºC",
            "canBeSensed": true,
            "canBeChanged": true,
            "initialValue": "",
            "canChange": false
          },
          "id": 12,
          "name": "valueInCelsius",
          "description": "The value of the temperature sensor in celsius.",
          "dataType": "ºC",
          "blocks": [
            {
              "variable": {
                "id": 119,
                "name": "valueInCelsius",
                "content": "",
                "type": "NUMBER"
              },
              "targetFunction": {
                "id": 14,
                "name": "getValue",
                "description": "Get LM35 value.",
                "blocks": [
                  {
                    "pin": {
                      "id": 15,
                      "name": "dataPin",
                      "isAnalog": true,
                      "isInput": true
                    },
                    "variable": {
                      "id": 118,
                      "name": "valueInCelsius",
                      "content": "",
                      "type": "NUMBER"
                    },
                    "targetFunction": {
                      "id": 0,
                      "parameters": []
                    },
                    "arguments": [],
                    "id": 117,
                    "order": 0
                  }
                ],
                "parameters": []
              },
              "arguments": [],
              "id": 120,
              "order": 0
            },
            {
              "variable": {
                "id": 124,
                "name": "result",
                "content": "",
                "type": "NUMBER"
              },
              "targetFunction": {
                "id": 122,
                "name": "*",
                "description": "",
                "parameters": []
              },
              "arguments": [
                {
                  "id": 119,
                  "name": "valueInCelsius",
                  "content": "",
                  "type": "NUMBER"
                },
                {
                  "id": 123,
                  "name": "",
                  "content": "2.5",
                  "type": "NUMBER"
                }
              ],
              "id": 121,
              "order": 1
            }
          ],
          "parameters": []
        }
      ],
      "components": [
        {
          "id": 13,
          "name": "lm35",
          "description": "LM35 temperature sensor.",
          "functions": [
            {
              "id": 14,
              "name": "getValue",
              "description": "Get LM35 value.",
              "blocks": [
                {
                  "pin": {
                    "id": 15,
                    "name": "dataPin",
                    "isAnalog": true,
                    "isInput": true
                  },
                  "variable": {
                    "id": 118,
                    "name": "valueInCelsius",
                    "content": "",
                    "type": "NUMBER"
                  },
                  "targetFunction": {
                    "id": 0,
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 117,
                  "order": 0
                }
              ],
              "parameters": []
            }
          ],
          "pins": [
            {
              "id": 15,
              "name": "dataPin",
              "isAnalog": true,
              "isInput": true
            }
          ]
        }
      ]
    },
    {
      "id": 16,
      "name": "pH_sensor",
      "description": "The pH sensor for the soil\u0027s pH.",
      "resource": {
        "id": 35,
        "name": "pH_sensor",
        "description": "The pH sensor for the soil\u0027s pH."
      },
      "topics": [
        {
          "initialValue": "0.0",
          "facetDefinition": {
            "id": 42,
            "name": "valueInPh",
            "dataType": "",
            "canBeSensed": true,
            "canBeChanged": true,
            "initialValue": "",
            "canChange": false
          },
          "id": 17,
          "name": "valueInPh",
          "description": "The value of the pH sensor.",
          "dataType": "",
          "blocks": [
            {
              "variable": {
                "id": 127,
                "name": "valueInPh",
                "content": "",
                "type": "NUMBER"
              },
              "targetFunction": {
                "id": 19,
                "name": "getValue",
                "description": "Get phModule value.",
                "blocks": [
                  {
                    "pin": {
                      "id": 20,
                      "name": "dataPin",
                      "isAnalog": true,
                      "isInput": true
                    },
                    "variable": {
                      "id": 126,
                      "name": "phValue",
                      "content": "",
                      "type": "NUMBER"
                    },
                    "targetFunction": {
                      "id": 0,
                      "parameters": []
                    },
                    "arguments": [],
                    "id": 125,
                    "order": 0
                  }
                ],
                "parameters": []
              },
              "arguments": [],
              "id": 128,
              "order": 0
            },
            {
              "variable": {
                "id": 129,
                "name": "pHVolMultiplied",
                "content": "",
                "type": "NUMBER"
              },
              "targetFunction": {
                "id": 131,
                "name": "*",
                "description": "",
                "parameters": []
              },
              "arguments": [
                {
                  "id": 127,
                  "name": "valueInPh",
                  "content": "",
                  "type": "NUMBER"
                },
                {
                  "id": 132,
                  "name": "",
                  "content": "-5.7",
                  "type": "NUMBER"
                }
              ],
              "id": 130,
              "order": 1
            },
            {
              "variable": {
                "id": 136,
                "name": "result",
                "content": "",
                "type": "NUMBER"
              },
              "targetFunction": {
                "id": 134,
                "name": "+",
                "description": "",
                "parameters": []
              },
              "arguments": [
                {
                  "id": 129,
                  "name": "pHVolMultiplied",
                  "content": "",
                  "type": "NUMBER"
                },
                {
                  "id": 135,
                  "name": "",
                  "content": "28.4",
                  "type": "NUMBER"
                }
              ],
              "id": 133,
              "order": 2
            }
          ],
          "parameters": []
        }
      ],
      "components": [
        {
          "id": 18,
          "name": "phModule",
          "description": "phModule for arduino.",
          "functions": [
            {
              "id": 19,
              "name": "getValue",
              "description": "Get phModule value.",
              "blocks": [
                {
                  "pin": {
                    "id": 20,
                    "name": "dataPin",
                    "isAnalog": true,
                    "isInput": true
                  },
                  "variable": {
                    "id": 126,
                    "name": "phValue",
                    "content": "",
                    "type": "NUMBER"
                  },
                  "targetFunction": {
                    "id": 0,
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 125,
                  "order": 0
                }
              ],
              "parameters": []
            }
          ],
          "pins": [
            {
              "id": 20,
              "name": "dataPin",
              "isAnalog": true,
              "isInput": true
            }
          ]
        }
      ]
    },
    {
      "id": 21,
      "name": "moisture_sensor",
      "description": "The moisture sensor for the soil.",
      "resource": {
        "id": 36,
        "name": "moisture_sensor",
        "description": "The moisture sensor for the soil."
      },
      "topics": [
        {
          "initialValue": "0.0",
          "facetDefinition": {
            "id": 43,
            "name": "valueInKgPerM3",
            "dataType": "kg/m³",
            "canBeSensed": true,
            "canBeChanged": true,
            "initialValue": "",
            "canChange": false
          },
          "id": 22,
          "name": "valueInKgPerM3",
          "description": "The value of the moisture sensor.",
          "dataType": "kg/m³",
          "blocks": [
            {
              "variable": {
                "id": 139,
                "name": "moistureValue",
                "content": "",
                "type": "NUMBER"
              },
              "targetFunction": {
                "id": 24,
                "name": "getValue",
                "description": "Get moistureModule value.",
                "blocks": [
                  {
                    "pin": {
                      "id": 25,
                      "name": "dataPin",
                      "isAnalog": true,
                      "isInput": true
                    },
                    "variable": {
                      "id": 138,
                      "name": "moistureValue",
                      "content": "",
                      "type": "NUMBER"
                    },
                    "targetFunction": {
                      "id": 0,
                      "parameters": []
                    },
                    "arguments": [],
                    "id": 137,
                    "order": 0
                  }
                ],
                "parameters": []
              },
              "arguments": [],
              "id": 140,
              "order": 0
            },
            {
              "condition": "moistureValue \u003e 400",
              "trueBlocks": [
                {
                  "variable": {
                    "id": 144,
                    "name": "finalMoistureValue",
                    "content": "dry",
                    "type": "TEXT"
                  },
                  "targetFunction": {
                    "id": 143,
                    "name": "\u003d",
                    "description": "",
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 142,
                  "order": 0
                }
              ],
              "falseBlocks": [
                {
                  "targetFunction": {
                    "id": 146,
                    "name": "\u003d",
                    "description": "",
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 145,
                  "order": 0
                }
              ],
              "id": 141,
              "order": 1
            },
            {
              "condition": "moistureValue \u003c 400 \u0026\u0026 moistureValue \u003e 300",
              "trueBlocks": [
                {
                  "variable": {
                    "id": 150,
                    "name": "finalMoistureValue",
                    "content": "wet",
                    "type": "TEXT"
                  },
                  "targetFunction": {
                    "id": 149,
                    "name": "\u003d",
                    "description": "",
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 148,
                  "order": 0
                }
              ],
              "falseBlocks": [
                {
                  "targetFunction": {
                    "id": 152,
                    "name": "\u003d",
                    "description": "",
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 151,
                  "order": 0
                }
              ],
              "id": 147,
              "order": 2
            },
            {
              "condition": "moistureValue \u003c 300",
              "trueBlocks": [
                {
                  "variable": {
                    "id": 156,
                    "name": "finalMoistureValue",
                    "content": "ideal",
                    "type": "TEXT"
                  },
                  "targetFunction": {
                    "id": 155,
                    "name": "\u003d",
                    "description": "",
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 154,
                  "order": 0
                }
              ],
              "falseBlocks": [
                {
                  "targetFunction": {
                    "id": 158,
                    "name": "\u003d",
                    "description": "",
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 157,
                  "order": 0
                }
              ],
              "id": 153,
              "order": 3
            }
          ],
          "parameters": []
        }
      ],
      "components": [
        {
          "id": 23,
          "name": "moistureModule",
          "description": "moistureModule for arduino.",
          "functions": [
            {
              "id": 24,
              "name": "getValue",
              "description": "Get moistureModule value.",
              "blocks": [
                {
                  "pin": {
                    "id": 25,
                    "name": "dataPin",
                    "isAnalog": true,
                    "isInput": true
                  },
                  "variable": {
                    "id": 138,
                    "name": "moistureValue",
                    "content": "",
                    "type": "NUMBER"
                  },
                  "targetFunction": {
                    "id": 0,
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 137,
                  "order": 0
                }
              ],
              "parameters": []
            }
          ],
          "pins": [
            {
              "id": 25,
              "name": "dataPin",
              "isAnalog": true,
              "isInput": true
            }
          ]
        }
      ]
    },
    {
      "id": 26,
      "name": "luminosity_sensor",
      "description": "The luminosity sensor for the environment.",
      "resource": {
        "id": 37,
        "name": "luminosity_sensor",
        "description": "The luminosity sensor for the environment."
      },
      "topics": [
        {
          "initialValue": "noLight",
          "facetDefinition": {
            "id": 44,
            "name": "status",
            "dataType": "noLight/withLight",
            "canBeSensed": true,
            "canBeChanged": true,
            "initialValue": "",
            "canChange": false
          },
          "id": 27,
          "name": "status",
          "description": "The value of the luminosity sensor (noLight, withLight).",
          "dataType": "noLight/withLight",
          "blocks": [
            {
              "variable": {
                "id": 161,
                "name": "luminosityStatus",
                "content": "",
                "type": "SIGNAL"
              },
              "targetFunction": {
                "id": 29,
                "name": "status",
                "description": "Get luminosity status value.",
                "blocks": [
                  {
                    "pin": {
                      "id": 30,
                      "name": "dataPin",
                      "isAnalog": true,
                      "isInput": true
                    },
                    "variable": {
                      "id": 160,
                      "name": "luminosityStatus",
                      "content": "",
                      "type": "SIGNAL"
                    },
                    "targetFunction": {
                      "id": 0,
                      "parameters": []
                    },
                    "arguments": [],
                    "id": 159,
                    "order": 0
                  }
                ],
                "parameters": []
              },
              "arguments": [],
              "id": 162,
              "order": 0
            },
            {
              "condition": "luminosityStatus \u003d\u003d HIGH",
              "trueBlocks": [
                {
                  "variable": {
                    "id": 166,
                    "name": "",
                    "content": "withLight",
                    "type": "TEXT"
                  },
                  "targetFunction": {
                    "id": 165,
                    "name": "\u003d",
                    "description": "",
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 164,
                  "order": 0
                }
              ],
              "falseBlocks": [
                {
                  "variable": {
                    "id": 169,
                    "name": "",
                    "content": "noLight",
                    "type": "TEXT"
                  },
                  "targetFunction": {
                    "id": 168,
                    "name": "\u003d",
                    "description": "",
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 167,
                  "order": 0
                }
              ],
              "id": 163,
              "order": 1
            }
          ],
          "parameters": []
        }
      ],
      "components": [
        {
          "id": 28,
          "name": "ldr",
          "description": "LDR sensor.",
          "functions": [
            {
              "id": 29,
              "name": "status",
              "description": "Get luminosity status value.",
              "blocks": [
                {
                  "pin": {
                    "id": 30,
                    "name": "dataPin",
                    "isAnalog": true,
                    "isInput": true
                  },
                  "variable": {
                    "id": 160,
                    "name": "luminosityStatus",
                    "content": "",
                    "type": "SIGNAL"
                  },
                  "targetFunction": {
                    "id": 0,
                    "parameters": []
                  },
                  "arguments": [],
                  "id": 159,
                  "order": 0
                }
              ],
              "parameters": []
            }
          ],
          "pins": [
            {
              "id": 30,
              "name": "dataPin",
              "isAnalog": true,
              "isInput": true
            }
          ]
        }
      ]
    }
  ],
  "portMicrocontrollerMap": {
    "/dev/ttyS0": {
      "id": 0,
      "baudRate": 0
    }
  }
}

