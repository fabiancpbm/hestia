PARSER_BEGIN(ThingComp)


/**
  * Gerador de analidador lexico da linguagem embedded-mas.
  *
  * O código
  */
package br.com.chongroup.hestia.parser;

import java.io.File;
import java.util.ArrayList;

public class ThingComp {
  /** É possível passar um arquivo para ser analisado .thing ou escrever a linguagem na linha de comando. Na pasta do projeto tem um arquivo de exemplo simulando a criação de um device chamado smart-home. */
  public static void main(String args[]) throws ParseException {
    ThingComp parser;
    if (args.length == 0) {
        System.out.println("Reading from standard input...");
        parser = new ThingComp(System.in);
    } else if (args[0].endsWith(".thing")) {
        System.out.println("Reading from file: " + args[0]);
        try {
            parser = new ThingComp(new java.io.FileInputStream(args[0]));
        } catch (java.io.FileNotFoundException e) {
            System.err.println("File " + args[0] + " not found.");
            return;
        }
    } else {
        System.err.println("You can use the standard input or indicates a file with .device extension.");
        return;
    }

    parser.ThingBody();
  }
}

PARSER_END(ThingComp)

// Ignorando espaços, pulo de linha, comentários, etc.
SKIP :
{
    " " | "\t" | "\n" | "\r"
    | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN :
{
    <THING : ".thing">
    | <EXOGENOUS: ".exogenous">
    | <EXOGENOUS_GROUP: ".exogenous*">
    | <ENDOGENOUS: ".endogenous">
    | <ENDOGENOUS_GROUP: ".endogenous*">
    | <MICROCONTROLLER: ".microcontroller">
    | <MICROCONTROLLER_GROUP: ".microcontroller*">
    | <SENSOR : ".sensor">
    | <SENSOR_GROUP : ".sensor*">
    | <ACTUATOR : ".actuator">
    | <ACTUATOR_GROUP : ".actuator*">
    | <MAS : ".mas">
    | <MAS_GROUP : ".mas*">
    | <ARTIFACT : ".artifact">
    | <ARTIFACT_GROUP : ".artifact*">
    | <AGENT : ".agent">
    | <AGENT_GROUP : ".agent*">
    | <MIDDLEWARE : ".middleware">
    | <MIDDLEWARE_GROUP : ".middleware*">
    | <BELIEF : ".belief">
    | <BELIEF_GROUP : ".belief*">
    | <STRING : "\""
       ( ( ~["\"","\\","\n","\r"])
       | ("\\" (
                 ["n","t","v","b","r","f","a","\\","?","'","\""]
                |
                 "0" (["0"-"7"])*
                |
                 ["1"-"9"] (["0"-"9"])*
                |
                 ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
               )
         )
       )*
       "\"">
    | <NUMBER : ((["0"-"9"])+ ("." (["0"-"9"])+)* | (["0"-"9"])* "." (["0"-"9"])+)>
    | <BOOL : ("true" | "false" | "TRUE" | "FALSE")>
    | <PIN_STATE : ("high" | "low" | "HIGH" | "LOW")>
    | <SYMBOL : ["a"-"z", "A"-"Z"] (["-", "_"] | ["a"-"z", "A"-"Z", "0"-"9"])* | "_">
    | <POINTER : (":" <SYMBOL>)+>
    | <VAR : ".var">
}

void ThingBody() :
{
}
{
    <THING> <SYMBOL> "{" (ExogenousBodyGroup() | ExogenousBody() | MASBodyGroup() | MASBody()) * "}" <EOF>
//    {
//        return jjtThis;
//    }
}

void ExogenousBodyGroup() :
{}
{
    <EXOGENOUS_GROUP> "{" (<SYMBOL>  ExogenousValue())* "}"
}

void ExogenousBody() :
{}
{
    <EXOGENOUS> <SYMBOL>  ExogenousValue()
}

void ExogenousValue() :
{}
{
    "{" (MicrocontrollerBodyGroup() | MicrocontrollerBody() | MiddlewareBodyGroup() | MiddlewareBody())* "}"
}

void MicrocontrollerBodyGroup() :
{
    Token t;
    String content = "";
}
{
    <MICROCONTROLLER_GROUP> "{" (t = <SYMBOL>  content = MicrocontrollerValue()
        {
            java.io.File path = new java.io.File("projetinho/Project/Hardware/");
            String fileName = t.image;
            String sensors = content.split(";;;")[0].replaceAll("\n+", "\n");
            String actuators = content.split(";;;")[1].replaceAll("\n+", "\n");
            String[] sensorsA = sensors.split("\n");
            String[] actuatorsA = actuators.split("\n");
            String sensorSetup = "";
            for (String s : sensorsA) {
                sensorSetup += "\tpinMode(" + s.split(" ")[1] + ", INPUT);\n";
            }

            String actuatorSetup = "";
            for (String s : actuatorsA) {
                actuatorSetup += "\tpinMode(" + s.split(" ")[1] + ", OUTPUT);\n";
            }

            String fileContent = sensors + "\n" + actuators + "\nvoid setup() {\n" + sensorSetup + "\n" + actuatorSetup + "\n}\nvoid loop() {}";

            try {
                path.mkdirs();
                java.io.File file = new File(path + "/" + fileName + ".ino");
                file.createNewFile();
                java.io.FileWriter myWriter = new java.io.FileWriter(file);
                myWriter.write(fileContent);
                myWriter.close();
                System.out.println("Successfully wrote to the file.");
            } catch (java.io.IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        })* "}"
}

void MicrocontrollerBody() :
{
    Token t;
    String content = "";
}
{
    <MICROCONTROLLER> t = <SYMBOL>  content = MicrocontrollerValue()
    {
        java.io.File path = new java.io.File("projetinho/Project/Hardware/");
        String fileName = t.image;
        String sensors = content.split(";;;")[0].replaceAll("\n+", "\n");
        String actuators = content.split(";;;")[1].replaceAll("\n+", "\n");
        String[] sensorsA = sensors.split("\n");
        String[] actuatorsA = actuators.split("\n");
        String sensorSetup = "";
        for (String s : sensorsA) {
            sensorSetup += "\tpinMode(" + s + ", INPUT);\n";
        }

        String actuatorSetup = "";
        for (String s : actuatorsA) {
            actuatorSetup += "\tpinMode(" + s + ", OUTPUT);\n";
        }

        String fileContent = sensors + "\n" + actuators + "\nvoid setup() {\n" + sensorSetup + "\n" + actuatorSetup + "\n}\nvoid loop() {}";

        try {
            path.mkdirs();
            java.io.File file = new File(path + "/" + fileName + ".ino");
            file.createNewFile();
            java.io.FileWriter myWriter = new java.io.FileWriter(file);
            myWriter.write(fileContent);
            myWriter.close();
            System.out.println("Successfully wrote to the file.");
        } catch (java.io.IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
}

String MicrocontrollerValue() :
{
    String actuators = "";
    String sensors = "";
    String actuatorsJoined = "";
    String sensorsJoined = "";
}
{
    "{" (sensors = SensorBodyGroup() {sensorsJoined += sensors;} | sensors = SensorBody() {sensorsJoined += sensors;} | actuators = ActuatorBodyGroup() {actuatorsJoined += actuators;} | actuators = ActuatorBody() {actuatorsJoined += actuators;})* "}"
    {
        return sensorsJoined + ";;;" + actuatorsJoined;
    }
}

String SensorBodyGroup() :
{
    Token t;
    String value = "";
    String allSensors = "";
}
{
    <SENSOR_GROUP> "{" (t = <SYMBOL>  value = PrimativeValue() ";"
    {
        allSensors += "#define " + t.image.toUpperCase() + " " + value + ";\n";
    })* "}"

    {return allSensors;}
}

String SensorBody() :
{
    Token t;
    String value = "";
}
{
    <SENSOR> t = <SYMBOL>  value = PrimativeValue() ";"
    {
        return "#define " + t.image.toUpperCase() + " " + value + ";\n";
    }
}

String ActuatorBodyGroup() :
{
    Token t;
    Token value;
    String allActuators = "";
}
{
    <ACTUATOR_GROUP> "{" (t = <SYMBOL>  value = <NUMBER> ";" {
        allActuators += "#define " + t.image.toUpperCase() + " " + value.image + ";\n";
    })* "}"
    {
        return allActuators;
    }
}

String ActuatorBody() :
{
    Token t;
    Token value;
}
{
    <ACTUATOR> t = <SYMBOL> value = <NUMBER> ";"
    {
        return "#define " + t.image.toUpperCase() + " " + value.image + ";\n";
    }
}

void MiddlewareBodyGroup() :
{}
{
    <MIDDLEWARE_GROUP> "{" (<SYMBOL>  (MiddlewareValue() | (ArrayValue() | PrimativeValue()) ";"))* "}"
}

void MiddlewareBody() :
{}
{
    <MIDDLEWARE> <SYMBOL>  (MiddlewareValue() | (ArrayValue() | PrimativeValue()) ";")
}

void MiddlewareValue() :
{}
{
    "{" (Primitive())* "}"
}

void MASBodyGroup() :
{}
{
    <MAS_GROUP> "{" (<SYMBOL>  MASValue())* "}"
}

void MASBody() :
{
}
{
    <MAS> <SYMBOL>  MASValue()
}

void MASValue() :
{
}
{
    "{" (EndogenousBodyGroup() | EndogenousBody() | AgentBodyGroup() | AgentBody())* "}"
}

void EndogenousBodyGroup() :
{}
{
    <ENDOGENOUS_GROUP> "{" (<SYMBOL>  EndogenousValue())* "}"
}

void EndogenousBody() :
{}
{
    <ENDOGENOUS> <SYMBOL> EndogenousValue()
}

void EndogenousValue() :
{}
{
    "{" (ArtifactBodyGroup() | ArtifactBody())* "}"
}

void ArtifactBodyGroup() :
{
    Token t;
    String obsProperties = "";
}
{
    <ARTIFACT_GROUP> "{" (t = <SYMBOL>  obsProperties = ArtifactValue()
        {
            java.io.File path = new java.io.File("projetinho/Project/MAS/artifact/");
            String fileName = t.image.replaceAll("-", "");
            String fileContent = "import cartago.*;\npublic class " + fileName + " extends Artifact {\n\tvoid init() {\n\t\t" + obsProperties.replaceAll("\n", "\n\t\t") + "\n\t}\n}";
            try {
                path.mkdirs();
                java.io.File file = new File(path + "/" + fileName + ".java");
                file.createNewFile();
                java.io.FileWriter myWriter = new java.io.FileWriter(file);
                myWriter.write(fileContent);
                myWriter.close();
                System.out.println("Successfully wrote to the file.");
            } catch (java.io.IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        })* "}"
}

void ArtifactBody() :
{
    Token t;
    String obsProperties = "";
}
{
    <ARTIFACT> t =  <SYMBOL>  obsProperties = ArtifactValue()
    {
        java.io.File path = new java.io.File("projetinho/Project/MAS/artifact/");
        String fileName = t.image.replaceAll("-", "");
        String fileContent = "import cartago.*;\npublic class " + fileName + " extends Artifact {\n\tvoid init() {\n\t\t" + obsProperties.replaceAll("\n", "\n\t\t") + "\n\t}\n}";
        try {
            path.mkdirs();
            java.io.File file = new File(path + "/" + fileName + ".java");
            file.createNewFile();
            java.io.FileWriter myWriter = new java.io.FileWriter(file);
            myWriter.write(fileContent);
            myWriter.close();
            System.out.println("Successfully wrote to the file.");
        } catch (java.io.IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
}

String ArtifactValue() :
{
    String obsProperty = "";
    String obsProperties = "";
 }
{
    "{" (obsProperty = Primitive()
        {
            obsProperties += "defineObsProperty(" + obsProperty.split(";")[0].replaceAll("-", "") + ", " + obsProperty.split(";")[1] + ");\n";
        })* "}"
    {
        return obsProperties;
    }
}

void AgentBodyGroup() :
{
    Token t;
    String fileContent = "";
}
{
    <AGENT_GROUP> "{" (t = <SYMBOL>  fileContent = AgentValue()
        {
            java.io.File path = new java.io.File("projetinho/Project/MAS/agent/");
            try {
                path.mkdirs();
                java.io.File file = new File(path + "/" + t.image + ".asl");
                file.createNewFile();
                java.io.FileWriter myWriter = new java.io.FileWriter(file);
                myWriter.write(fileContent);
                myWriter.close();
                System.out.println("Successfully wrote to the file.");
            } catch (java.io.IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        }
    )* "}"
}

void AgentBody() :
{
    Token t;
    String fileContent = "";
}
{
    <AGENT> t = <SYMBOL>  fileContent = AgentValue()
    {
        java.io.File path = new java.io.File("projetinho/Project/MAS/agent/");
        try {
            path.mkdirs();
            java.io.File file = new File(path + "/" + t.image + ".asl");
            file.createNewFile();
            java.io.FileWriter myWriter = new java.io.FileWriter(file);
            myWriter.write(fileContent);
            myWriter.close();
            System.out.println("Successfully wrote to the file.");
        } catch (java.io.IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
}

String AgentValue() :
{
    String beliefs = "";
    String allBeliefs = "";
}
{
    "{" (beliefs = BeliefBodyGroup() {allBeliefs += beliefs;} | beliefs = BeliefBody() {allBeliefs += beliefs;})* "}"
    {
        return "/* Initial beliefs and rules */\n" + allBeliefs + "\n/* Initial goals */\n!start.\n\n/* Plans */\n+!start : true <- \n\t.print(\"Hello World!\").";
    }
}

String BeliefBodyGroup() :
{
    String beliefs = "";
    String belief = "";
    Token t;
}
{
    <BELIEF_GROUP> "{" (t = <SYMBOL> belief = PrimativeValue() ";"
            {beliefs += t.image + "(" + belief.trim().replaceAll("\"", "") + ").\n";})* "}"
    {
        return beliefs;
    }
}

String BeliefBody() :
{
    Token t;
    String belief = "";
}
{
    <BELIEF> t = <SYMBOL>  belief = PrimativeValue() ";"
    {
        return t.image + "(" + belief.trim().replaceAll("\"", "") + ").\n";
    }
}

String Primitive():
{
    Token t;
    String var = "";
}
{
    <VAR> t = <SYMBOL> (var = ArrayValue() | var = PrimativeValue()) ";"
    {
        return t.image + ";" + var;
    }
}

String ArrayValue() :
{
    String item = "";
    String array = "";
}
{
    "[" (array = PrimativeValue() ("," item = PrimativeValue() {array += "," + item;})*)* "]"
    {
        return "[" + array + "]";
    }
}

String PrimativeValue() :
{
    Token t;
}
{
    t = <STRING>
        {
           return t.image;
        }
    | t = <NUMBER>
        {
           return t.image;
        }
    | t = <BOOL>
        {
           return t.image;
        }
    | t = <PIN_STATE>
        {
           return t.image;
        }
    | t = <POINTER>
        {
           return t.image;
        }
}
